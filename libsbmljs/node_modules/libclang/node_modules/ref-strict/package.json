{
  "name": "ref-strict",
  "description": "Add strict typing for ffi types",
  "keywords": [
    "ref",
    "c",
    "c++",
    "ffi"
  ],
  "version": "0.0.2",
  "author": {
    "name": "Timothy J Fontaine",
    "email": "tjfontaine@gmail.com",
    "url": "http://atxconsulting.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tjfontaine/ref-strict.git"
  },
  "main": "./lib/strict.js",
  "scripts": {
    "test": "node-gyp rebuild --directory test && mocha -gc --reporter spec"
  },
  "dependencies": {
    "debug": "*",
    "ref": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "ref-array": "*",
    "ref-struct": "*"
  },
  "engines": {
    "node": "*"
  },
  "readme": "ref-strict\n==========\n\nadds strict typing layer on to ffi on a per type basis, especially helpful if\nyou are binding a library with opqaue pointers and want to ensure that what is\nbeing passed to the native layer is indeed the proper type\n\n```javascript\nvar voidPtr = ref.refType(ref.types.void)\nvar myType = StrictType(voidPtr)\n\nvar l = ffi.Library(mylib, {\n  myType_init: [myType, []],\n  otherType_init: [voidPtr, []],\n  some_method: [ref.type.void, [myType]],\n})\n\nvar m = l.myType_init()\nvar o = l.otherType_init()\n\n// will throw\nl.some_method(o)\n\n// will succeed\nl.some_method(m)\n\n// will succeed but cause you all kinds of pain\nl.some_method(myType.cast(o))\n```\n",
  "_id": "ref-strict@0.0.2",
  "dist": {
    "shasum": "36202e716a7b6bf8ef3c1c16bdf6aa1d38ba0fec"
  },
  "_from": "ref-strict@>= v0.0.2"
}
